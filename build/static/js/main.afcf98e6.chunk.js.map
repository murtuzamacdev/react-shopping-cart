{"version":3,"sources":["data/products.ts","context/global.context.tsx","pages/cart/Cart.tsx","pages/product-list/ProductList.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["PRODUCTS","productId","productName","productPrice","maxBuyLimit","showInventoryWarningLimit","INVENTORY","currentQuantity","GlobalContext","React","products","inventory","cart","addToCart","undefined","removeFromCart","GlobalContextProvider","props","setinventory","setcart","Provider","value","product","_inventory","Object","assign","item","find","_cart","index","findIndex","splice","children","Cart","globalContext","useContext","getProduct","total","forEach","calculateCartTotal","Table","striped","bordered","hover","map","onClick","handleRemove","ProductList","useEffect","console","log","checkForStockWarning","length","to","len","filter","itemInvetory","alert","handleAddToCartTap","App","style","margin","Consumer","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afcf98e6.chunk.js","sourcesContent":["export interface ProductItem {\n    productId: string;\n    productName: string;\n    productPrice: number;\n    maxBuyLimit: number;\n    showInventoryWarningLimit: number\n}\n\nexport interface InvetoryItem {\n    productId: string;\n    currentQuantity: number;\n}\n\n\nexport const PRODUCTS: ProductItem[] = [\n    {\n        productId: '1',\n        productName: 'Macbook Pro',\n        productPrice: 120000,\n        maxBuyLimit: 3,\n        showInventoryWarningLimit: 1\n    },\n    {\n        productId: '2',\n        productName: 'iPhone',\n        productPrice: 80000,\n        maxBuyLimit: 2,\n        showInventoryWarningLimit: 1\n    },\n    {\n        productId: '3',\n        productName: 'iWatch',\n        productPrice: 30000,\n        maxBuyLimit: 2,\n        showInventoryWarningLimit: 10\n    },\n    {\n        productId: '4',\n        productName: 'iPad',\n        productPrice: 60000,\n        maxBuyLimit: 2,\n        showInventoryWarningLimit: 1\n    }\n]\n\nexport const INVENTORY: InvetoryItem[] = [\n    {\n        productId: '1',\n        currentQuantity: 5\n    },\n    {\n        productId: '2',\n        currentQuantity: 10\n    },\n    {\n        productId: '3',\n        currentQuantity: 8\n    },\n    {\n        productId: '4',\n        currentQuantity: 9\n    }\n]","import * as React from \"react\";\nimport { ProductItem, PRODUCTS, InvetoryItem, INVENTORY } from \"../data/products\";\n\nexport interface GlobalContextProps {\n  products: ProductItem[];\n  inventory: InvetoryItem[];\n  cart: any;\n  addToCart: any;\n  removeFromCart: any;\n}\n\nexport const GlobalContext = React.createContext<GlobalContextProps>({\n  products: [],\n  inventory: [],\n  cart: [],\n  addToCart: undefined,\n  removeFromCart: undefined,\n});\n\nexport const GlobalContextProvider = (props: any) => {\n  const [products, setproducts] = React.useState(PRODUCTS);\n  const [inventory, setinventory] = React.useState(INVENTORY);\n  const [cart, setcart] = React.useState<string[] | []>([]);\n\n  const addToCart = (product: ProductItem) => {\n    // update cart\n    setcart([...cart, product.productId]);\n\n    // Update invetory\n    let _inventory: InvetoryItem[] = Object.assign([], inventory);\n    let item = _inventory.find((item: InvetoryItem) => item.productId === product.productId);\n    if (item) {\n      let currentQuantity = item?.currentQuantity;\n      item[\"currentQuantity\"] = currentQuantity - 1;\n      setinventory(_inventory);\n    }\n  };\n\n  const removeFromCart = (productId: string) => {\n    let _cart = Object.assign([], cart);\n    let index = _cart.findIndex((item: string) => item === productId);\n    _cart.splice(index, 1);\n    setcart(_cart)\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        products,\n        cart,\n        addToCart,\n        inventory,\n        removeFromCart,\n      }}>\n      {props.children}\n    </GlobalContext.Provider>\n  );\n};\n","import { useContext, useEffect } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { GlobalContext } from \"../../context/global.context\";\n\ninterface CartProps {}\n\nconst Cart: React.FC<CartProps> = () => {\n  const globalContext = useContext(GlobalContext);\n\n  const getProduct = (productId: string) => {\n    return globalContext.products.find((item) => item.productId === productId);\n  };\n\n  const handleRemove = (productId: string) => {\n    globalContext.removeFromCart(productId);\n  };\n\n  const calculateCartTotal = () => {\n    let total = 0;\n    globalContext.cart.forEach((productId: string) => {\n      let product = globalContext.products.find((item) => item.productId === productId);\n      if (product) {\n        total = total + product.productPrice;\n      }\n    });\n    return total;\n  };\n\n  return (\n    <>\n      <h1>Cart</h1>\n      <h3>Total price: {calculateCartTotal()}</h3>\n\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>Product Name</th>\n            <th>Product Price</th>\n            <th>Product Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {globalContext.cart.map((productId: string) => (\n            <tr>\n              <td>{getProduct(productId)?.productName}</td>\n              <td>{getProduct(productId)?.productPrice}</td>\n              <td>\n                <button\n                  onClick={() => {\n                    handleRemove(productId);\n                  }}>\n                  Remove\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default Cart;\n","import { useContext, useEffect } from \"react\";\nimport { Alert, Table } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../../context/global.context\";\nimport { ProductItem, InvetoryItem } from \"../../data/products\";\n\ninterface ProductListProps {}\n\nconst ProductList: React.FC<ProductListProps> = () => {\n  const globalContext = useContext(GlobalContext);\n\n  useEffect(() => {\n    console.log(globalContext);\n  }, []);\n\n  const handleAddToCartTap = (product: ProductItem) => {\n    let len = globalContext.cart.filter((item: string) => product.productId === item).length;\n    let itemInvetory = globalContext.inventory.find((item: InvetoryItem) => item.productId === product.productId);\n\n    if (itemInvetory?.currentQuantity === 0) {\n      alert(\"Sorry! Out of stock.\");\n    } else {\n      if (len >= product.maxBuyLimit) {\n        alert(\"Max limit reached\");\n      } else {\n        globalContext.addToCart(product);\n      }\n    }\n  };\n\n  const checkForStockWarning = (product: ProductItem) => {\n    let currentQuantity = globalContext.inventory.find((item) => item.productId === product.productId)?.currentQuantity;\n\n    if (currentQuantity && currentQuantity <= product.showInventoryWarningLimit) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <>\n      <h1>Products</h1>\n      <h3>Total items in cart: {globalContext.cart.length}</h3>\n      <Link to=\"cart\">View cart</Link>\n\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>Product Name</th>\n            <th>Product Price</th>\n            <th>Product Action</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {globalContext.products.map((item, index) => (\n            <tr>\n              <td>{item.productName}</td>\n              <td>{item.productPrice}</td>\n              <td>\n                <button\n                  onClick={() => {\n                    handleAddToCartTap(item);\n                  }}>\n                  Add to cart\n                </button>\n              </td>\n              <td>{checkForStockWarning(item) ? \"Limited Stock\" : \"In stock\"}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default ProductList;\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { GlobalContext, GlobalContextProvider } from \"./context/global.context\";\n\n// Components\nimport Cart from './pages/cart/Cart';\nimport ProductList from \"./pages/product-list/ProductList\";\n\nfunction App() {\n  return (\n    <div style={{margin:' 200px'}}>\n      <GlobalContextProvider>\n        <Router>\n          <GlobalContext.Consumer>\n            {(globalContext) => (\n              <div>\n\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                  <Route exact path=\"/\">\n                    <ProductList />\n                  </Route>\n                  <Route path=\"/cart\">\n                    <Cart />\n                  </Route>\n                </Switch>\n              </div>\n            )}\n          </GlobalContext.Consumer>\n        </Router>\n      </GlobalContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}